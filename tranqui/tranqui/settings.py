"""
Django settings for tranqui project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from datetime import timedelta
import os
from dotenv import load_dotenv

load_dotenv()  # This will load the .env file variables

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gud17viih(xlfdu^yi#0z7n4u8ab0h2l^z3$rc44b_s#pn7i4)'


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# ALLOWED_HOSTS = ['54.162.162.199', 'https://ec2-54-162-162-199.compute-1.amazonaws.com/', '127.0.0.1', '52.90.216.66', '03ea-221-120-236-55.ngrok-free.app']
ALLOWED_HOSTS = ['*']


# Application definition


INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # for django REST framework
    'drf_yasg',  # for swagger
    'channels',  # for django channels
    # custom django aaps
    'api',

]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'tranqui.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tranqui.wsgi.application'
ASGI_APPLICATION = "tranqui.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
LOGIN_URL = '/accounts/login/'
AUTH_USER_MODEL = 'api.User'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_TLS = True
EMAIL_SENDER = os.environ.get('EMAIL_SENDER')
EMAIL_PASSWORD = os.environ.get('EMAIL_PASSWORD')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
OPENAI_TOKEN_LIMIT = os.environ.get('OPENAI_TOKEN_LIMIT')
TOKEN_PER_WORD = os.environ.get('TOKEN_PER_WORD')
CHATBOT_NAME = os.environ.get('CHATBOT_NAME')
SPEECH_FILE_PATH = os.environ.get('SPEECH_FILE_PATH')
INPUT_FILE_PATH = os.environ.get('INPUT_FILE_PATH')
BUFFER_SIZE = os.environ.get('BUFFER_SIZE')
BATCH_SIZE = os.environ.get('BATCH_SIZE')
DEEPGRAM_URL = os.environ.get('DEEPGRAM_URL')
DEEPGRAM_API_KEY = os.environ.get('DEEPGRAM_API_KEY')
LIVEKIT_ROOM_NAME = os.environ.get('LIVEKIT_ROOM_NAME')
LIVEKIT_API_SECRET = os.environ.get('LIVEKIT_API_SECRET')
LIVEKIT_API_KEY = os.environ.get('LIVEKIT_API_KEY')
LIVEKIT_API_URL = os.environ.get('LIVEKIT_URL')
CHAT_API_URL = os.environ.get('CHAT_API_URL')
CHAT_HISTORY_API_URL = os.environ.get('CHAT_HISTORY_API_URL')
MAX_TOKENS = int(os.environ.get('MAX_TOKENS'))
TOKENS_PER_WORD = float(os.environ.get('TOKENS_PER_WORD'))
INITIAL_SYSTEM_PROMPT = os.environ.get('INITIAL_SYSTEM_PROMPT')
STT_MODEL = os.environ.get('STT_MODEL')
STT_LANGUAGE = os.environ.get('STT_LANGUAGE')
LLM_MODEL = os.environ.get('LLM_MODEL')
LLM_TEMPERATURE = float(os.environ.get('LLM_TEMPERATURE'))
TTS_VOICE = os.environ.get('TTS_VOICE')
